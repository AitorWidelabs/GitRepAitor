import 'dart:ffi';
import 'dart:io' show Directory;
import 'package:path/path.dart' show join;
import 'package:sqflite/sqflite.dart';
import 'package:path_provider/path_provider.dart' show getApplicationDocumentsDirectory;

class DatabaseHelper {

  static final _databaseName = "pricelist_table.db";
  static final _databaseVersion = 1;

  static final table = 'products';

  static final columnId = 'product_id';
  static final columnName = 'product_name';
  static final columnPrice= 'product_price';

  // make this a singleton class
  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  // only have a single app-wide reference to the database
  static Database? _database;

  Future<Database> get database async =>
      _database ??= await _initDatabase();
  // this opens the database (and creates it if it doesn't exist)
  Future<Database>  _initDatabase() async {
      Directory documentsDirectory = await getApplicationDocumentsDirectory();
      String path = join(documentsDirectory.path, _databaseName);
      return await openDatabase(path,
          version: _databaseVersion,
          onCreate: _onCreate);
    }
  _SelectWhere(String productName) async {

    // get a reference to the database
    Database db = await DatabaseHelper.instance.database;
    List<String> columnsToSelect = [
      DatabaseHelper.columnId,
      DatabaseHelper.columnPrice,
      DatabaseHelper.columnName,

    ];
    String whereString = '${DatabaseHelper.columnName} = ?';

    List<dynamic> whereArguments = [productName];
    List<Map> result = await db.query(DatabaseHelper.table,
    columns:  columnsToSelect,
    where: whereString,
    whereArgs: whereArguments);

    // print the results
    result.forEach((row) => print(row));
    // {_id: 2, name: Mary, age: 32}
  }
  _SelectAll() async {

    // get a reference to the database
    Database db = await DatabaseHelper.instance.database;

    // raw query
    List<Map> result = await db.query(DatabaseHelper.table);

    // print the results
    result.forEach((row) => print(row));

  }
  _Insert(String productName, Double price) async {
    // get a reference to the database
    Database db = await DatabaseHelper.instance.database;
    Map<String, dynamic> row = {
      DatabaseHelper.columnName : productName,
      DatabaseHelper.columnPrice  : price
    };
    // do the insert and get the id of the inserted row
    int id = await db.insert(DatabaseHelper.table, row);
    // show the results: print all rows in the db
    print(await db.query(DatabaseHelper.table));
  }
  _UpdateByName(String productName, String newName, Double price) async {
    // get a reference to the database
    Database db = await DatabaseHelper.instance.database;

    Map<String, dynamic> row = {
      DatabaseHelper.columnName : newName,
      DatabaseHelper.columnPrice  : price
    };
    // raw query
    int updateCount = await db.update(
        DatabaseHelper.table,
        row,
        where: '${DatabaseHelper.columnName} = ?',
        whereArgs: [productName]);
    // show the results: print all rows in the db
    print(await db.query(DatabaseHelper.table));
  }
  _UpdateById(String ID, String newName, Double price) async {
    // get a reference to the database
    Database db = await DatabaseHelper.instance.database;
    Map<String, dynamic> row = {
      DatabaseHelper.columnName : newName,
      DatabaseHelper.columnPrice  : price
    };
    // raw query
    int updateCount = await db.update(
        DatabaseHelper.table,
        row,
        where: '${DatabaseHelper.columnId} = ?',
        whereArgs: [ID]);
    // show the results: print all rows in the db
    print(await db.query(DatabaseHelper.table));
  }
  _Delete(String ID) async {
    // get a reference to the database
    Database db = await DatabaseHelper.instance.database;
    // raw query
    await db.rawDelete('''DELETE FROM $table WHERE 'product_id' = ?
        ''', [ID]);
  }

  // SQL code to create the database table
  Future _onCreate(Database db, int version) async {


      await database;
      db.rawDelete("DROP TABLE IF EXISTS $table");

    await db.execute('''
          CREATE TABLE $table (
          `product_id` int(11) NOT NULL AUTO_INCREMENT,
          `product_price` decimal(10,2) NOT NULL,
          `product_name` varchar(32) NOT NULL,
          PRIMARY KEY ('product_id')
          )
          ''');
    //todo: peta este alter table. toca debugar. devuele un sql al final fijarse en eso.
    //await db.execute('''
     //     ALTER TABLE $table
      //    ADD PRIMARY KEY (`product_id`);
      //    ''');
    await db.rawInsert('INSERT INTO $table ($columnName, $columnPrice) VALUES("product1", 10.95)');
    await db.rawInsert('INSERT INTO $table ($columnName, $columnPrice) VALUES("product2", 9.99)');
    await db.rawInsert('INSERT INTO $table ($columnName, $columnPrice) VALUES("product3", 8.99)');


  }
}